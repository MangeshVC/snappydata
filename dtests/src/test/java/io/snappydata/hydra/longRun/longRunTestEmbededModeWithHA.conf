hydra.Prms-testRequirement += " with lead and server nodes performing HA";
hydra.Prms-testDescription += "While the tasks are being performed, the server and lead nodes will go down and come up.";

INITTASK    taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
            threadGroups = snappyThread, locatorThreads, snappyStoreThreads, leadThreads;

INCLUDE $JTESTS/io/snappydata/hydra/longRun/longRunTestEmbededMode.conf;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = backUpLeadConfigData
            threadGroups = snappyThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = backUpServerConfigData
            threadGroups = snappyThread;

TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cycleLeadVM
            maxThreads = 1
            startInterval = 3600
            threadGroups = snappyStoreThreads;

TASK        taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cycleStoreVms
            startInterval = 3000
            threadGroups = snappyThread;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = restoreServerConfigData
            threadGroups = snappyThread;

CLOSETASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = restoreLeadConfigData
            threadGroups = snappyThread;

io.snappydata.hydra.cluster.SnappyPrms-waitTimeBeforeNextCycleVM = 4200; //wait time before next restart.
io.snappydata.hydra.cluster.SnappyPrms-cycleVms = true;

//util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-stopModes = NICE_KILL;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundantCopies} EGNAR;

